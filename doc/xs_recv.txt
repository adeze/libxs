xs_recv(3)
==========


NAME
----
xs_recv - receive a message part from a socket


SYNOPSIS
--------
*int xs_recv (void '*socket', void '*buf', size_t 'len', int 'flags');*


DESCRIPTION
-----------
The _xs_recv()_ function shall receive a message from the socket referenced
by the 'socket' argument and store it in the buffer referenced by the 'buf'
argument. Any bytes exceeding the length specified by the 'len' argument shall
be truncated. If there are no messages available on the specified 'socket'
the _xs_recv()_ function shall block until the request can be satisfied.
The 'flags' argument is a combination of the flags defined below:

*XS_DONTWAIT*::
Specifies that the operation should be performed in non-blocking mode. If there
are no messages available on the specified 'socket', the _xs_recv()_
function shall fail with 'errno' set to EAGAIN.


Multi-part messages
~~~~~~~~~~~~~~~~~~~
A Crossroads message is composed of 1 or more message parts.  Crossroads
ensures atomic delivery of messages; peers shall receive either all
_message parts_ of a message or none at all. The total number of message
parts is unlimited except by available memory.

An application that processes multipart messages must use the _XS_RCVMORE_
linkxs:xs_getsockopt[3] option on the 'socket' after calling _xs_recv()_ to
determine if there are further parts to receive.

RETURN VALUE
------------
The _xs_recv()_ function shall return the number of bytes in the received
message if successful. Note that the value can exceed the value of the
'len' parameter, in this case the message was truncated. If not successful
the function shall return `-1` and set 'errno' to one of the values defined
below.


ERRORS
------
*EAGAIN*::
Non-blocking mode was requested and no messages are available at the moment.
*ENOTSUP*::
The _xs_recv()_ operation is not supported by this socket type.
*EFSM*::
The _xs_recv()_ operation cannot be performed on this socket at the moment
due to the socket not being in the appropriate state.  This error may occur with
socket types that switch between several states, such as XS_REP.  See the
_messaging patterns_ section of linkxs:xs_socket[3] for more information.
*ETERM*::
The 'context' associated with the specified 'socket' was terminated.
*ENOTSOCK*::
The provided 'socket' was invalid.
*EINTR*::
The operation was interrupted by delivery of a signal before a message was
available.
*ETIMEDOUT*::
Survey has timed out. (Applicable only to XS_SURVEYOR socket.)


EXAMPLE
-------
.Receiving a message from a socket
----
char buf [256];
nbytes = xs_recv (socket, buf, 256, 0);
assert (nbytes != -1);
----


SEE ALSO
--------
Applications that wish to use zero-copy messaging must use
linkxs:xs_recvmsg[3] instead of _xs_recv()_.

linkxs:xs_sendmsg[3]
linkxs:xs_getsockopt[3]
linkxs:xs_socket[7]
linkxs:xs[7]


AUTHORS
-------
This man page was written by Martin Sustrik <sustrik@250bpm.com>, Martin
Lucina <martin@lucina.net> and Pieter Hintjens <ph@imatix.com>.
